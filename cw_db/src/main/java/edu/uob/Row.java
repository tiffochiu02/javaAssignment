package edu.uob;

import java.util.*;

public class Row {
    private Map<String,String> rowValues; //the key in the map is column name
    private long primaryKey; //the unique key of the row
    //private String columnName;

    public Row() {
        this.primaryKey = getPrimaryKey();  //the primary key is generated by the table
        this.rowValues = new LinkedHashMap<>();
    }

    public Row(Map<String,String> initialData) {
        this.rowValues = new LinkedHashMap<>(initialData);
        this.primaryKey = getPrimaryKey();
    }

    public long getPrimaryKey() {
        return primaryKey;
    }
    public void setPrimaryKey(long primaryKey) {
        this.primaryKey = primaryKey;
    }
    public String getValue(String columnName) {
        return rowValues.get(columnName);
    }
    public Map<String,String> getRowValues(){
        return rowValues;
    }
    public void setValue(String columnName, String value) {
        rowValues.put(columnName, value);
    }
//    public void setRowValues(String columnName, Map<String, String> rowValue) {
//        this.rowValues = rowValues;
//    }

    public void removeValue(String columnName) {
        this.rowValues.remove(columnName.toLowerCase());
    }

    public String toString(boolean requiresId){
        StringBuilder result = new StringBuilder();
        if(requiresId){
            result.append(primaryKey).append("\t");
        }
        //result.append(primaryKey).append("\t");
        rowValues.forEach((k,v)->{
            //System.out.println(k + v);
            result.append(v).append("\t");
        });
        return result.toString();
    }
    public String toString(ArrayList<String> columns){
        StringBuilder result = new StringBuilder();
        for (String col : columns) {
            if(Objects.equals(col,Table.ID_COL)){
                result.append(primaryKey).append("\t");
            } else {
                result.append(rowValues.get(col)).append("\t");
            }
        }
        return result.toString();
    }

    //turn string into Row
    public static Row fromString(String rowString, ArrayList<String> columnNames, boolean checkId) {
        Row newRow = new Row();
        String[] tokens = rowString.split("\\s+");
        newRow.rowValues = new LinkedHashMap<>();
        if (tokens.length == 0) {return null;}
        int offset = 0;
        if(checkId){
            if(!tokens[0].matches("\\d+")) {return null;}    //checking whether the first item is a number / primary key
            newRow.setPrimaryKey(Long.parseLong(tokens[0]));
            offset = 1;
        }
        int numColumns = Math.min(tokens.length - offset, columnNames.size());
        for (int i = 0; i < numColumns && i < columnNames.size(); i++) {
            newRow.rowValues.put(columnNames.get(i), tokens[i+offset].trim());
        }
        return newRow;
    }

}


